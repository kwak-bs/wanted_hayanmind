{"version":3,"sources":["style/GlobalStyle.js","component/Comment/Comment.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","reset","Comment","data","map","id","email","name","CommentContainer","CommentBox","Title","Context","styled","div","App","useState","setIsdata","loading","setIsLoading","page","setPage","useEffect","fetch","method","then","res","json","prev","concat","onIntersect","observer","isIntersecting","target","setTarget","IntersectionObserver","threshold","observe","disconnect","Container","Wrap","className","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAoCeA,EAlCKC,YAAH,2hBACbC,K,cCAW,SAASC,EAAT,GAA4B,IAATC,EAAQ,EAARA,KAChC,OACE,8BACGA,EAAKC,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACtB,OACE,eAACC,EAAD,WACE,eAACC,EAAD,WACE,cAACC,EAAD,yBACA,cAACC,EAAD,UAAUN,OAEZ,eAACI,EAAD,WACE,cAACC,EAAD,oBACA,cAACC,EAAD,UAAUL,OAEZ,gCACE,cAACI,EAAD,sBACA,cAACC,EAAD,UAAUJ,SAXWF,QAoBnC,I,IAAMG,EAAmBI,IAAOC,IAAV,uIAQhBJ,EAAaG,IAAOC,IAAV,sGAMVH,EAAQE,IAAOC,IAAV,sHAOLF,EAAUC,IAAOC,IAAV,gDC7CE,SAASC,IACtB,MAA0BC,mBAAS,IAAnC,mBAAOZ,EAAP,KAAaa,EAAb,KACA,EAAgCD,oBAAS,GAAzC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAAwBH,mBAAS,GAAjC,mBAAOI,EAAP,KAAaC,EAAb,KAmBAC,qBAAU,WAfRH,GAAa,GACbI,MAAM,uDAAD,OACoDH,EADpD,cAEH,CACEI,OAAQ,QAGTC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACrB,GACLa,GAAU,SAACW,GAAD,OAAUA,EAAKC,OAAOzB,MAChCe,GAAa,QAShB,CAACC,IAGJ,IAAMU,EAAc,SAAC,EAASC,GAAa,oBAC/BC,iBAEJd,GAEFG,GAAQ,SAACO,GAAD,OAAUA,EAAO,OAK/B,EAA4BZ,mBAAS,MAArC,mBAAOiB,EAAP,KAAeC,EAAf,KAUA,OATAZ,qBAAU,WACR,IAAIS,EAKJ,OAJIE,IACFF,EAAW,IAAII,qBAAqBL,EAAa,CAAEM,UAAW,MACrDC,QAAQJ,GAEZ,kBAAMF,GAAYA,EAASO,gBACjC,CAACL,EAAQf,IAGV,eAACqB,EAAD,WACE,cAACC,EAAD,UACE,cAACrC,EAAD,CAASC,KAAMA,MAEjB,qBAAKqC,UAAU,UAAUC,IAAKR,EAA9B,SACGhB,GAAW,kBAMpB,IAAMqB,EAAY1B,IAAOC,IAAV,iIAOT0B,EAAO3B,IAAOC,IAAV,kECnEV6B,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC9B,EAAD,OAEF+B,SAASC,eAAe,W","file":"static/js/main.ef2d6a3d.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\r\nimport reset from 'styled-reset';\r\nconst GlobalStyle = createGlobalStyle`\r\n  ${reset};\r\n* {\r\n  box-sizing: border-box;\r\n  font-family: 'Noto Sans KR', sans-serif;\r\n  user-select: none;\r\n  -webkit-tap-highlight-color:rgba(255,255,255,0);\r\n  -webkit-touch-callout: none;\r\n}\r\nbutton {\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n}\r\nimg {\r\n  object-fit: cover;\r\n}\r\ninput[type='checkbox'] {\r\n  cursor: pointer;\r\n}\r\nbutton {\r\n  cursor: pointer;\r\n}\r\nul,li {\r\n  list-style: none;\r\n}\r\na {\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n}\r\nhtml {\r\n  overflow-x: hidden;\r\n}\r\n`;\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default function Comment({ data }) {\r\n  return (\r\n    <div>\r\n      {data.map(({ id, email, name }) => {\r\n        return (\r\n          <CommentContainer key = {id}>\r\n            <CommentBox>\r\n              <Title>Comment ld</Title>\r\n              <Context>{id}</Context>\r\n            </CommentBox>\r\n            <CommentBox>\r\n              <Title>Email</Title>\r\n              <Context>{email}</Context>\r\n            </CommentBox>\r\n            <div>\r\n              <Title>Comment</Title>\r\n              <Context>{name}</Context>\r\n            </div>\r\n          </CommentContainer>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CommentContainer = styled.div`\r\n  width: 100%;\r\n  padding: 20px;\r\n  margin: 10px 0;\r\n  border-radius: 20px;\r\n  background-color: #f8f9fa;\r\n`;\r\n\r\nconst CommentBox = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n`;\r\n\r\nconst Title = styled.div`\r\n  margin: 10px 10px 10px 0;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  color: #212529;\r\n`;\r\n\r\nconst Context = styled.div`\r\n  font-size: 18px;\r\n`;\r\n","import React, { useState, useEffect} from \"react\";\r\nimport Comment from \"./component/Comment/Comment\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function App() {\r\n  const [data, setIsdata] = useState([]);\r\n  const [loading, setIsLoading] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n\r\n  // data fetch\r\n  const getItems = () => {\r\n    setIsLoading(true);\r\n    fetch(\r\n      `https://jsonplaceholder.typicode.com/comments?_page=${page}&_limit=10`,\r\n      {\r\n        method: \"GET\",\r\n      }\r\n    )\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setIsdata((prev) => prev.concat(data));\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  // 초기 아이템 로딩\r\n  useEffect(() => {\r\n\r\n    getItems();\r\n    // 이슈 1. page 증가x, 최신 page를 못찾았던 이슈\r\n  }, [page]);\r\n\r\n  // IntersectionObserver Callback\r\n  const onIntersect = ([entry], observer) => {\r\n    if (entry.isIntersecting) {\r\n      // 이슈 3. 초기 마운트때 20개.\r\n      if(!loading) {\r\n        // 이슈 2. 무한 page 증식\r\n        setPage((prev) => prev + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [target, setTarget] = useState(null);\r\n  useEffect(() => {\r\n    let observer;\r\n    if (target) {\r\n      observer = new IntersectionObserver(onIntersect, { threshold: 0.5 });\r\n      observer.observe(target);\r\n    }\r\n    return () => observer && observer.disconnect();\r\n  }, [target, loading]);\r\n\r\n  return (\r\n    <Container>\r\n      <Wrap>\r\n        <Comment data={data}/>\r\n      </Wrap>\r\n      <div className=\"Loading\" ref={setTarget}>\r\n        {loading && \"Loading...\"}\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Wrap = styled.div`\r\n  width: 500px;\r\n  margin-top: 26px;\r\n`;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GlobalStyle from './style/GlobalStyle';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}